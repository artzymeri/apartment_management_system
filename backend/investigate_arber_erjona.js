const db = require('./models');
const { Op } = require('sequelize');

async function investigateTenantVisibility() {
  try {
    console.log('=== STEP-BY-STEP INVESTIGATION: Why Arber Cannot See Erjona ===\n');

    // STEP 1: Verify Arber's property manager setup
    console.log('STEP 1: Check Arber Halili (Property Manager)');
    const arber = await db.User.findOne({
      where: { email: 'arberhalili@gmail.com' }
    });
    console.log('  - ID:', arber.id);
    console.log('  - Name:', arber.name, arber.surname);
    console.log('  - Role:', arber.role);
    console.log('  - property_ids field (legacy):', arber.property_ids);

    // STEP 2: Check properties assigned to Arber via junction table
    console.log('\nSTEP 2: Check properties assigned to Arber via junction table');
    const arberProperties = await db.PropertyManager.findAll({
      where: { user_id: arber.id },
      attributes: ['property_id']
    });
    const arberPropertyIds = arberProperties.map(p => p.property_id);
    console.log('  - Managed Property IDs:', arberPropertyIds);

    // STEP 3: Verify Erjona's tenant setup
    console.log('\nSTEP 3: Check Erjona Berisha (Tenant)');
    const erjona = await db.User.findOne({
      where: { email: 'jona@gmail.com' }
    });
    console.log('  - ID:', erjona.id);
    console.log('  - Name:', erjona.name, erjona.surname);
    console.log('  - Role:', erjona.role);
    console.log('  - property_ids field:', erjona.property_ids);
    console.log('  - property_ids type:', typeof erjona.property_ids);
    console.log('  - property_ids raw:', JSON.stringify(erjona.property_ids));

    // STEP 4: Test if property 3 is in the overlap
    console.log('\nSTEP 4: Check if property 3 is in both lists');
    const hasProperty3 = arberPropertyIds.includes(3);
    const erjonaHasProperty3 = erjona.property_ids && erjona.property_ids.includes(3);
    console.log('  - Arber manages property 3?', hasProperty3);
    console.log('  - Erjona assigned to property 3?', erjonaHasProperty3);

    // STEP 5: Test the LIKE query (current implementation)
    console.log('\nSTEP 5: Test LIKE query for property 3');
    const likeQuery = {
      role: 'tenant',
      [Op.or]: arberPropertyIds.map(propId => ({
        property_ids: {
          [Op.like]: `%${propId}%`
        }
      }))
    };
    console.log('  - Query:', JSON.stringify(likeQuery, null, 2));

    const likeResults = await db.User.findAll({
      where: likeQuery,
      attributes: ['id', 'name', 'surname', 'email', 'property_ids']
    });
    console.log('  - Results count:', likeResults.length);
    console.log('  - Results:', likeResults.map(t => ({
      id: t.id,
      name: `${t.name} ${t.surname}`,
      email: t.email,
      property_ids: t.property_ids
    })));

    // STEP 6: Test with JSON_CONTAINS (proper MySQL JSON function)
    console.log('\nSTEP 6: Test JSON_CONTAINS for property 3 specifically');
    const jsonContainsResults = await db.sequelize.query(
      `SELECT id, name, surname, email, property_ids 
       FROM users 
       WHERE role = 'tenant' 
       AND JSON_CONTAINS(property_ids, '3', '$')`,
      { type: db.sequelize.QueryTypes.SELECT }
    );
    console.log('  - JSON_CONTAINS Results:', jsonContainsResults);

    // STEP 7: Test with all property IDs
    console.log('\nSTEP 7: Test JSON_CONTAINS with all of Arber\'s property IDs');
    for (const propId of arberPropertyIds) {
      const results = await db.sequelize.query(
        `SELECT id, name, surname, email, property_ids 
         FROM users 
         WHERE role = 'tenant' 
         AND JSON_CONTAINS(property_ids, '${propId}', '$')`,
        { type: db.sequelize.QueryTypes.SELECT }
      );
      console.log(`  - Tenants with property ${propId}:`, results.map(r => r.name));
    }

    // STEP 8: Check the actual SQL generated by Sequelize
    console.log('\nSTEP 8: Check Sequelize SQL generation');
    const { count, rows } = await db.User.findAndCountAll({
      where: likeQuery,
      attributes: { exclude: ['password'] },
      limit: 10,
      offset: 0,
      logging: console.log // This will print the SQL query
    });
    console.log('  - Count:', count);
    console.log('  - Rows:', rows.length);

    console.log('\n=== INVESTIGATION COMPLETE ===');
    process.exit(0);
  } catch (error) {
    console.error('Error during investigation:', error);
    process.exit(1);
  }
}

investigateTenantVisibility();

